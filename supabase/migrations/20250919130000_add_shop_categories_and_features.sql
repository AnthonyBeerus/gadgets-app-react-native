-- Migration: Enhanced Shop Categories and Features
-- Date: 2025-09-19
-- Description: Update categories and add shop-specific features based on Molapo Crossing Mall

-- Update category table to include shop-specific features
ALTER TABLE public.category ADD COLUMN IF NOT EXISTS has_virtual_try_on BOOLEAN DEFAULT FALSE;
ALTER TABLE public.category ADD COLUMN IF NOT EXISTS has_delivery BOOLEAN DEFAULT FALSE;
ALTER TABLE public.category ADD COLUMN IF NOT EXISTS has_collection BOOLEAN DEFAULT FALSE;
ALTER TABLE public.category ADD COLUMN IF NOT EXISTS has_appointment_booking BOOLEAN DEFAULT FALSE;
ALTER TABLE public.category ADD COLUMN IF NOT EXISTS description TEXT;
ALTER TABLE public.category ADD COLUMN IF NOT EXISTS icon_name TEXT;

-- Create shops table for individual mall stores
CREATE TABLE IF NOT EXISTS public.shops (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    category_id BIGINT REFERENCES public.category(id) ON DELETE CASCADE,
    description TEXT,
    location TEXT NOT NULL, -- Location within the mall
    phone TEXT,
    email TEXT,
    opening_hours JSONB, -- Store opening hours
    image_url TEXT,
    logo_url TEXT,
    website_url TEXT,
    instagram_handle TEXT,
    facebook_handle TEXT,
    has_online_ordering BOOLEAN DEFAULT FALSE,
    has_delivery BOOLEAN DEFAULT FALSE,
    has_collection BOOLEAN DEFAULT FALSE,
    has_appointment_booking BOOLEAN DEFAULT FALSE,
    has_virtual_try_on BOOLEAN DEFAULT FALSE,
    delivery_fee DECIMAL(8,2),
    minimum_order_amount DECIMAL(10,2),
    estimated_delivery_time TEXT, -- e.g., "30-45 minutes"
    is_featured BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    rating DECIMAL(3,2) DEFAULT 0.0,
    total_reviews INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Update product table to include shop reference
ALTER TABLE public.product ADD COLUMN IF NOT EXISTS shop_id BIGINT REFERENCES public.shops(id) ON DELETE CASCADE;
ALTER TABLE public.product ADD COLUMN IF NOT EXISTS description TEXT;
ALTER TABLE public.product ADD COLUMN IF NOT EXISTS brand TEXT;
ALTER TABLE public.product ADD COLUMN IF NOT EXISTS sku TEXT;
ALTER TABLE public.product ADD COLUMN IF NOT EXISTS is_available BOOLEAN DEFAULT TRUE;
ALTER TABLE public.product ADD COLUMN IF NOT EXISTS weight DECIMAL(8,2); -- for delivery calculations
ALTER TABLE public.product ADD COLUMN IF NOT EXISTS dimensions JSONB; -- {length, width, height}

-- Create appointments table for booking services
CREATE TABLE IF NOT EXISTS public.appointments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shop_id BIGINT REFERENCES public.shops(id) ON DELETE CASCADE,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    service_type TEXT NOT NULL, -- e.g., "haircut", "consultation", "fitting"
    appointment_date DATE NOT NULL,
    appointment_time TIME NOT NULL,
    duration_minutes INTEGER DEFAULT 60,
    customer_name TEXT NOT NULL,
    customer_phone TEXT NOT NULL,
    customer_email TEXT,
    special_requests TEXT,
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'cancelled', 'completed', 'no_show')),
    price DECIMAL(10,2),
    notes TEXT, -- Staff notes
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create shop reviews table
CREATE TABLE IF NOT EXISTS public.shop_reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shop_id BIGINT REFERENCES public.shops(id) ON DELETE CASCADE,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
    review_text TEXT,
    order_id BIGINT REFERENCES public.order(id) ON DELETE SET NULL,
    is_verified_purchase BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create delivery orders table
CREATE TABLE IF NOT EXISTS public.delivery_orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT REFERENCES public.order(id) ON DELETE CASCADE,
    shop_id BIGINT REFERENCES public.shops(id) ON DELETE CASCADE,
    delivery_type TEXT NOT NULL CHECK (delivery_type IN ('delivery', 'collection')),
    delivery_address TEXT, -- Required for delivery
    delivery_phone TEXT NOT NULL,
    delivery_notes TEXT,
    collection_time TIMESTAMP WITH TIME ZONE, -- For collection orders
    estimated_delivery_time TIMESTAMP WITH TIME ZONE,
    actual_delivery_time TIMESTAMP WITH TIME ZONE,
    delivery_fee DECIMAL(8,2) DEFAULT 0,
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'preparing', 'ready_for_collection', 'out_for_delivery', 'delivered', 'cancelled')),
    delivery_person_name TEXT,
    delivery_person_phone TEXT,
    tracking_number TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_shops_category_id ON public.shops(category_id);
CREATE INDEX IF NOT EXISTS idx_shops_active ON public.shops(is_active);
CREATE INDEX IF NOT EXISTS idx_shops_featured ON public.shops(is_featured);
CREATE INDEX IF NOT EXISTS idx_product_shop_id ON public.product(shop_id);
CREATE INDEX IF NOT EXISTS idx_appointments_shop_id ON public.appointments(shop_id);
CREATE INDEX IF NOT EXISTS idx_appointments_user_id ON public.appointments(user_id);
CREATE INDEX IF NOT EXISTS idx_appointments_date ON public.appointments(appointment_date);
CREATE INDEX IF NOT EXISTS idx_shop_reviews_shop_id ON public.shop_reviews(shop_id);
CREATE INDEX IF NOT EXISTS idx_delivery_orders_order_id ON public.delivery_orders(order_id);
CREATE INDEX IF NOT EXISTS idx_delivery_orders_shop_id ON public.delivery_orders(shop_id);

-- Enable Row Level Security
ALTER TABLE public.shops ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.appointments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.shop_reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.delivery_orders ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Shops are viewable by everyone" ON public.shops
    FOR SELECT USING (true);

CREATE POLICY "Allow all appointments operations" ON public.appointments
    FOR ALL USING (true);

CREATE POLICY "Allow all shop reviews operations" ON public.shop_reviews
    FOR ALL USING (true);

CREATE POLICY "Allow all delivery orders operations" ON public.delivery_orders
    FOR ALL USING (true);

-- Function to update shop rating when reviews are added/updated
CREATE OR REPLACE FUNCTION update_shop_rating()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE public.shops 
    SET 
        rating = (
            SELECT COALESCE(AVG(rating), 0) 
            FROM public.shop_reviews 
            WHERE shop_id = COALESCE(NEW.shop_id, OLD.shop_id)
        ),
        total_reviews = (
            SELECT COUNT(*) 
            FROM public.shop_reviews 
            WHERE shop_id = COALESCE(NEW.shop_id, OLD.shop_id)
        ),
        updated_at = timezone('utc'::text, now())
    WHERE id = COALESCE(NEW.shop_id, OLD.shop_id);
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Create trigger to automatically update shop ratings
CREATE TRIGGER shop_review_rating_trigger
    AFTER INSERT OR UPDATE OR DELETE ON public.shop_reviews
    FOR EACH ROW EXECUTE FUNCTION update_shop_rating();

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers to automatically update updated_at
CREATE TRIGGER shops_updated_at_trigger
    BEFORE UPDATE ON public.shops
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER appointments_updated_at_trigger
    BEFORE UPDATE ON public.appointments
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER shop_reviews_updated_at_trigger
    BEFORE UPDATE ON public.shop_reviews
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER delivery_orders_updated_at_trigger
    BEFORE UPDATE ON public.delivery_orders
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();