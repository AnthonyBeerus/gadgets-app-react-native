-- Migration: Add Services Booking Schema
-- Date: 2025-09-19
-- Description: Extends the existing e-commerce schema to support service bookings

-- Create service_categories table
CREATE TABLE IF NOT EXISTS "public"."service_category" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text" NOT NULL,
    "icon" "text" NOT NULL,
    "color" "text" NOT NULL,
    "slug" "text" NOT NULL,
    "is_active" boolean DEFAULT true NOT NULL
);

ALTER TABLE "public"."service_category" OWNER TO "postgres";

ALTER TABLE "public"."service_category" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."service_category_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Create service_providers table
CREATE TABLE IF NOT EXISTS "public"."service_provider" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "email" "text" NOT NULL,
    "phone" "text",
    "address" "text",
    "description" "text",
    "avatar_url" "text",
    "rating" decimal(3,2) DEFAULT 0.0,
    "total_reviews" bigint DEFAULT 0,
    "is_verified" boolean DEFAULT false,
    "is_active" boolean DEFAULT true
);

ALTER TABLE "public"."service_provider" OWNER TO "postgres";

ALTER TABLE "public"."service_provider" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."service_provider_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Create services table
CREATE TABLE IF NOT EXISTS "public"."service" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "category_id" bigint NOT NULL,
    "provider_id" bigint NOT NULL,
    "price" decimal(10,2) NOT NULL,
    "duration_minutes" integer NOT NULL,
    "image_url" "text",
    "rating" decimal(3,2) DEFAULT 0.0,
    "total_reviews" bigint DEFAULT 0,
    "is_active" boolean DEFAULT true,
    "max_advance_booking_days" integer DEFAULT 30,
    "slug" "text" NOT NULL
);

ALTER TABLE "public"."service" OWNER TO "postgres";

ALTER TABLE "public"."service" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."service_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Create service_availability table for provider schedules
CREATE TABLE IF NOT EXISTS "public"."service_availability" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "provider_id" bigint NOT NULL,
    "service_id" bigint,
    "day_of_week" integer NOT NULL CHECK ("day_of_week" >= 0 AND "day_of_week" <= 6),
    "start_time" time NOT NULL,
    "end_time" time NOT NULL,
    "is_available" boolean DEFAULT true
);

ALTER TABLE "public"."service_availability" OWNER TO "postgres";

ALTER TABLE "public"."service_availability" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."service_availability_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Create service_bookings table
CREATE TABLE IF NOT EXISTS "public"."service_booking" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "service_id" bigint NOT NULL,
    "provider_id" bigint NOT NULL,
    "booking_date" date NOT NULL,
    "booking_time" time NOT NULL,
    "duration_minutes" integer NOT NULL,
    "total_amount" decimal(10,2) NOT NULL,
    "status" "text" DEFAULT 'pending' NOT NULL,
    "notes" "text",
    "payment_status" "text" DEFAULT 'pending' NOT NULL,
    "payment_intent_id" "text",
    "cancelled_at" timestamp with time zone,
    "cancellation_reason" "text",
    "completed_at" timestamp with time zone,
    "slug" "text" NOT NULL,
    CONSTRAINT "service_booking_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'confirmed'::"text", 'in_progress'::"text", 'completed'::"text", 'cancelled'::"text", 'no_show'::"text"]))),
    CONSTRAINT "service_booking_payment_status_check" CHECK (("payment_status" = ANY (ARRAY['pending'::"text", 'paid'::"text", 'failed'::"text", 'refunded'::"text"])))
);

ALTER TABLE "public"."service_booking" OWNER TO "postgres";

ALTER TABLE "public"."service_booking" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."service_booking_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Create service_reviews table
CREATE TABLE IF NOT EXISTS "public"."service_review" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "booking_id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "service_id" bigint NOT NULL,
    "provider_id" bigint NOT NULL,
    "rating" integer NOT NULL CHECK ("rating" >= 1 AND "rating" <= 5),
    "comment" "text",
    "is_verified" boolean DEFAULT false
);

ALTER TABLE "public"."service_review" OWNER TO "postgres";

ALTER TABLE "public"."service_review" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."service_review_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Add Primary Key Constraints
ALTER TABLE ONLY "public"."service_category"
    ADD CONSTRAINT "service_category_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."service_provider"
    ADD CONSTRAINT "service_provider_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."service"
    ADD CONSTRAINT "service_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."service_availability"
    ADD CONSTRAINT "service_availability_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."service_booking"
    ADD CONSTRAINT "service_booking_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."service_review"
    ADD CONSTRAINT "service_review_pkey" PRIMARY KEY ("id");

-- Add Unique Constraints
ALTER TABLE ONLY "public"."service_category"
    ADD CONSTRAINT "service_category_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."service_category"
    ADD CONSTRAINT "service_category_slug_key" UNIQUE ("slug");

ALTER TABLE ONLY "public"."service_provider"
    ADD CONSTRAINT "service_provider_email_key" UNIQUE ("email");

ALTER TABLE ONLY "public"."service"
    ADD CONSTRAINT "service_slug_key" UNIQUE ("slug");

ALTER TABLE ONLY "public"."service_booking"
    ADD CONSTRAINT "service_booking_slug_key" UNIQUE ("slug");

-- One review per booking
ALTER TABLE ONLY "public"."service_review"
    ADD CONSTRAINT "service_review_booking_id_key" UNIQUE ("booking_id");

-- Add Foreign Key Constraints
ALTER TABLE ONLY "public"."service"
    ADD CONSTRAINT "service_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."service_category"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."service"
    ADD CONSTRAINT "service_provider_id_fkey" FOREIGN KEY ("provider_id") REFERENCES "public"."service_provider"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."service_availability"
    ADD CONSTRAINT "service_availability_provider_id_fkey" FOREIGN KEY ("provider_id") REFERENCES "public"."service_provider"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."service_availability"
    ADD CONSTRAINT "service_availability_service_id_fkey" FOREIGN KEY ("service_id") REFERENCES "public"."service"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."service_booking"
    ADD CONSTRAINT "service_booking_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."service_booking"
    ADD CONSTRAINT "service_booking_service_id_fkey" FOREIGN KEY ("service_id") REFERENCES "public"."service"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."service_booking"
    ADD CONSTRAINT "service_booking_provider_id_fkey" FOREIGN KEY ("provider_id") REFERENCES "public"."service_provider"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."service_review"
    ADD CONSTRAINT "service_review_booking_id_fkey" FOREIGN KEY ("booking_id") REFERENCES "public"."service_booking"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."service_review"
    ADD CONSTRAINT "service_review_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."service_review"
    ADD CONSTRAINT "service_review_service_id_fkey" FOREIGN KEY ("service_id") REFERENCES "public"."service"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."service_review"
    ADD CONSTRAINT "service_review_provider_id_fkey" FOREIGN KEY ("provider_id") REFERENCES "public"."service_provider"("id") ON UPDATE CASCADE ON DELETE CASCADE;

-- Enable Row Level Security
ALTER TABLE "public"."service_category" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."service_provider" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."service" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."service_availability" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."service_booking" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."service_review" ENABLE ROW LEVEL SECURITY;

-- Create RLS Policies

-- Service Categories - Read access for all authenticated users, admin-only write
CREATE POLICY "Enable read access for all users" ON "public"."service_category" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."service_category" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text"));

CREATE POLICY "Enable Update for Admins only" ON "public"."service_category" FOR UPDATE TO "authenticated" USING ((( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text")) WITH CHECK ((( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text"));

CREATE POLICY "Enable Delete from Admins only" ON "public"."service_category" FOR DELETE TO "authenticated" USING ((( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text"));

-- Service Providers - Read access for all, admin-only write (for now)
CREATE POLICY "Enable read access for all users" ON "public"."service_provider" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable insert for admins users only" ON "public"."service_provider" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text"));

CREATE POLICY "Enable update for auth users" ON "public"."service_provider" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable delete for Admins only" ON "public"."service_provider" FOR DELETE TO "authenticated" USING ((( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text"));

-- Services - Read access for all, admin-only write
CREATE POLICY "Enable read access for all users" ON "public"."service" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable insert for admins users only" ON "public"."service" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text"));

CREATE POLICY "Enable update for auth users" ON "public"."service" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable delete for Admins only" ON "public"."service" FOR DELETE TO "authenticated" USING ((( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text"));

-- Service Availability - Provider or admin access
CREATE POLICY "Enable read access for all users" ON "public"."service_availability" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable all operations for auth users" ON "public"."service_availability" TO "authenticated" USING (true) WITH CHECK (true);

-- Service Bookings - Users can manage their own bookings
CREATE POLICY "Users can view their own bookings" ON "public"."service_booking" FOR SELECT TO "authenticated" USING (("user_id" = "auth"."uid"()) OR (( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text"));

CREATE POLICY "Users can create their own bookings" ON "public"."service_booking" FOR INSERT TO "authenticated" WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "Users can update their own bookings" ON "public"."service_booking" FOR UPDATE TO "authenticated" USING (("user_id" = "auth"."uid"()) OR (( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text")) WITH CHECK (("user_id" = "auth"."uid"()) OR (( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text"));

-- Service Reviews - Users can manage their own reviews
CREATE POLICY "Enable read access for all users" ON "public"."service_review" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Users can create their own reviews" ON "public"."service_review" FOR INSERT TO "authenticated" WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "Users can update their own reviews" ON "public"."service_review" FOR UPDATE TO "authenticated" USING (("user_id" = "auth"."uid"())) WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "Users can delete their own reviews" ON "public"."service_review" FOR DELETE TO "authenticated" USING (("user_id" = "auth"."uid"()) OR (( SELECT "users"."type"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = 'ADMIN'::"text"));

-- Grant permissions to all tables and sequences
GRANT ALL ON TABLE "public"."service_category" TO "anon";
GRANT ALL ON TABLE "public"."service_category" TO "authenticated";
GRANT ALL ON TABLE "public"."service_category" TO "service_role";
GRANT ALL ON SEQUENCE "public"."service_category_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."service_category_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."service_category_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."service_provider" TO "anon";
GRANT ALL ON TABLE "public"."service_provider" TO "authenticated";
GRANT ALL ON TABLE "public"."service_provider" TO "service_role";
GRANT ALL ON SEQUENCE "public"."service_provider_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."service_provider_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."service_provider_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."service" TO "anon";
GRANT ALL ON TABLE "public"."service" TO "authenticated";
GRANT ALL ON TABLE "public"."service" TO "service_role";
GRANT ALL ON SEQUENCE "public"."service_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."service_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."service_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."service_availability" TO "anon";
GRANT ALL ON TABLE "public"."service_availability" TO "authenticated";
GRANT ALL ON TABLE "public"."service_availability" TO "service_role";
GRANT ALL ON SEQUENCE "public"."service_availability_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."service_availability_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."service_availability_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."service_booking" TO "anon";
GRANT ALL ON TABLE "public"."service_booking" TO "authenticated";
GRANT ALL ON TABLE "public"."service_booking" TO "service_role";
GRANT ALL ON SEQUENCE "public"."service_booking_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."service_booking_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."service_booking_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."service_review" TO "anon";
GRANT ALL ON TABLE "public"."service_review" TO "authenticated";
GRANT ALL ON TABLE "public"."service_review" TO "service_role";
GRANT ALL ON SEQUENCE "public"."service_review_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."service_review_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."service_review_id_seq" TO "service_role";

-- Add realtime subscriptions for booking updates
ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."service_booking";
ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."service_review";

-- Create indexes for performance
CREATE INDEX "service_category_slug_idx" ON "public"."service_category" USING btree ("slug");
CREATE INDEX "service_provider_email_idx" ON "public"."service_provider" USING btree ("email");
CREATE INDEX "service_category_id_idx" ON "public"."service" USING btree ("category_id");
CREATE INDEX "service_provider_id_idx" ON "public"."service" USING btree ("provider_id");
CREATE INDEX "service_slug_idx" ON "public"."service" USING btree ("slug");
CREATE INDEX "service_availability_provider_day_idx" ON "public"."service_availability" USING btree ("provider_id", "day_of_week");
CREATE INDEX "service_booking_user_id_idx" ON "public"."service_booking" USING btree ("user_id");
CREATE INDEX "service_booking_service_id_idx" ON "public"."service_booking" USING btree ("service_id");
CREATE INDEX "service_booking_provider_id_idx" ON "public"."service_booking" USING btree ("provider_id");
CREATE INDEX "service_booking_date_time_idx" ON "public"."service_booking" USING btree ("booking_date", "booking_time");
CREATE INDEX "service_booking_status_idx" ON "public"."service_booking" USING btree ("status");
CREATE INDEX "service_review_service_id_idx" ON "public"."service_review" USING btree ("service_id");
CREATE INDEX "service_review_provider_id_idx" ON "public"."service_review" USING btree ("provider_id");